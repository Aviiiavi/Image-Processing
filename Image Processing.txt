>> x=imread(‘SAMPLE1.jpg’);
     size(x)
     whos(‘x’)
     imfinfo(‘SAMPLE1.jpg’)
     imshow(x)
     x1=rgb2gray(x);
     size(x1)
>> x=imread(‘SAMPLE1.jpg’);
     x1=rgb2gray(x);
     imwrite(x1,’SAMPLE1a.jpg’,’quality’,10);
     imwrite(x1,’SAMPLE1b.jpg’,’quality’,90);
     figure(1), imshow('SAMPLE1a.jpg');
     imdistline, impixelinfo,
     figure(2), imshow('SAMPLE1b.jpg');
     imdistline, impixelinfo,
     figure(3), imshow(x1,[0 100]);
     imdistline, impixelinfo,
     figure(4), imshow(x1,[200 250]);
     imdistline, impixelinfo
>> x=imread('1.jpg');
y=rgb2gray(x);
imwrite(y,'2a.jpg','quality',10)
imwrite(y,'2b.jpg','quality',40)
imwrite(y,'2c.jpg','quality',70)
imwrite(y,'2d.jpg','quality',80)
imwrite(y,'2e.jpg','quality',100)

Program 02: Calculate the compression ratio of an 8-bit image.
>> K=imfinfo('1.jpg')
IB=K.Width*K.Height*K.BitDepth/8;
CB=K.FileSize
CR=IB/CB

Program 03: Calculate the compression ratio of an 8-bit image.
>> x=imread('1.jpg');
imwrite(x,'1-1.jpg','quality',10)
IB=K.Width*K.Height*K.BitDepth/8;
CB=K.FileSize
CR=IB/CB

Program 04:  Study the phenomenon of false contouring of medical image.
>> x=imread('1.jpg')
a=rgb2gray(x);
imshow(a),title('original image')
figure,imshow(grayslice(a,128),jet(128)),title('128 Colour Level')
figure,imshow(grayslice(a,64),gray(64)),title('128 Gray Level')
figure,imshow(grayslice(a,32),gray(32)),title('128 Gray Level')
figure,imshow(grayslice(a,16),gray(16)),title('128 Gray Level')
figure,imshow(grayslice(a,8),gray(8)),title('8 Gray Level')

Program 05:  To read an image and display the variation of intensity values of the image across a line.
>> x=imread('1.jpg');
y=mean2(x)
y=std2(x)
imshow(x)
improfile

Program 06:  To adjust the contrast and Pixel Region tool associated with the image 
>> x=imread('1.jpg');
x=rgb2gray(x);
imshow(x)
imcontrast(gca)
impixelregion

Program 07: To adjust the contrast of an image by modifying the axes
>> x=imread('1.jpg');
x=rgb2gray(x);
imshow(x)
imcontrast(gca)
imdisplayrange;

Program 08:  To find histogram of the image.
>> x=imread('1.jpg');
y=rgb2gray(x);
imhist(y)

Program 09:  Create a mask on an image and show the masked image area.
>> x=imread('1.jpg');
x=rgb2gray(x)
imshow(x)
s=impoly
p=createMask(s);
figure,imshow(p)
q=immultiply(p,x)
figure,imshow(q);

Program 10: Create a Pixel Region tool associated with the image.
>> x=imread('1.jpg');
x=rgb2gray(x);
imshow(x)
impixelregion

Program 11:  To draw a polygon on an image
>> x=imread('1.jpg');
b=rgb2gray(x);
imshow(x)
s=impoly
 
%To Delete
x=imread('1.jpg');
b=rgb2gray(x);
imshow(x)
s=impoly
delete(s)

Program 01: To perform linear histogram stretching of an image.
>> x=imread('1.jpg');
y=rgb2gray(x);
a=min(y(:));
b=max(y(:));
X=(y-a).*(255/(b-a));
subplot(2,2,1),imshow(y),title('original image')
subplot(2,2,2),imhist(y),title('hist 0l')
subplot(2,2,3),imshow(X),title('linear stretched image')
subplot(2,2,4),imhist(X),title('hist linear stretched image')


Program 02: To perform contrast stretching of an image.
>> x=imread('1.jpg');
b=rgb2gray(x);
j=1./(1+(100./double(x)+eps)).^0.5;
j=rgb2gray(j);
subplot(2,2,1),imshow(b),title('original image')
subplot(2,2,2),imhist(b),title('hist Ol')
subplot(2,2,3),imshow(j),title('DSC')
subplot(2,2,4),imhist(j),title('hist DSC')

Program 03: To perform adaptive histogram equilization of an image.
>> x=imread('1.jpg');
b=rgb2gray(x);
j=adapthisteq(b);
subplot(2,2,1),imshow(b),title('original image')
subplot(2,2,2),imhist(b),title('hist Ol')
subplot(2,2,3),imshow(j),title('clache')
subplot(2,2,4),imhist(j),title('hist clache')


Program 04:  To reduce the size of an image using pyramid reduction.
>> IO=imread('1.jpg');
I1=impyramid(IO,'reduce');
I2=impyramid(I1,'reduce');
I3=impyramid(I2,'reducde');
imshow(IO),figure,imshow(I1)
figure,imshow(I2),figure,imshow(I3)

Program 05:  To generate various types of matrices.
>> x=eye(4)
x1=zeros(4)
x2=ones(4,5)
x3=rand(4)
x4=diag(x)
x5=triu(x)

Program 06:  To perform linear convolution of 1-D matrices/vectors.
>> x=[1 1 1];
y=[1 1 1];
a=conv(x,y)

Program 07: To compute correlation of two 1-D matrices.
>> x=[1 2 3];
Y=[3 2 1];
A=xcorr(x,y)

Program 08:  To perform linear convolution of 2-D matrices.
>> x=[5 10; 15 20];
h=[3 6; 9 12];
a=conv2(x,h)

Program 09:  To build IMAGEMODEL object for accessing an image with these properties.
>> x=imread('1.jpg');
h=imshow(x)
imgmodel=getimagemodel(h)


Program 10: To get the attributes of an image.
>> x=imread('1.jpg');
h=imshow(x)
attrs=imattributes(h)

Program 11:  To study and observe the effects of a median filter on a two dimensional matrix.
>> X=[5 10 12 16;23 2 50 15 20;3 6 85 25 14;12 10 15 9 12];
j=medfilt2(x);
j1=medfilt2(j)

Program 01: To perform resizing of an image by interpolation methods. 
>> I0=imread(“1.jpg”); 
I1=imresize(I0,05,’bicubic’); 
I2=imresize(I0,5,'nearest'); 
I3=imresize(I0,5,'bilinear'); 
figure,imshow(I0),title('I0') 
figure,imshow(I1),title('I1') 
figure,imshow(I2),title('I2') 
figure,imshow(I3),title('I3') 

Program 02: To perform resizing of an image by specifying number of rows. 
>>I0=imread(“1.jpg”); 
I1=imresize(I0,[300 NaN]); 
I2=imresize(I0,[200 NaN]); 
I3=imresize(I0,[100 NaN]); 
figure,imshow(I0),title('I0') 
figure,imshow(I1),title('I1') 
figure,imshow(I2),title('I2') 
figure,imshow(I3),title('I3') 

Program 03: To perform spatial filtering of an image using an averaging mask. 
>>x=imread(“1.jpg”); 
w=1/9*ones(3); 
w1=1/25*ones(5); 
g=imfilter(x,w,’replicate’); 
g1=imfilter(x,w1,’replicate’); %image edge values will be replicated onto the borders 
subplot(2,2,1),imshow(x),title(“original image”) 
subplot(2,2,2),imshow(g),title(“Filtered Image-3”) 
subplot(2,2,3),imshow(g1),title(“Filtered Image-5”)
Program 04: To perform spatial filtering of an image using a Gaussian function. 
>>x=imread(“1.jpg”); 
w=1/16*[1 2 1;2 4 2;1 2 1]; 
w1=1/100*[1 2 4 2 1;2 4 8 4 2;4 8 16 8 4;2 4 8 4 2;1 2 4 2 1]; 
g=imfilter(x,w,’replicate’); 
g1=imfilter(x,w1,’replicate’); 
subplot(1,3,1),imshow(x),title('original image') 
subplot(1,3,2),imshow(g),title('filtered image') 
subplot(1,3,3),imshow(g1),title('filtered image-1') 

Program 05: To perform spatial filatering of an image by convoluting it with Gaussian function. 
>>x; w; w1; 
g=imfilter(x,w,’conv’,’replicate’); g1=imfilter(x,w1,’conv’,’replicate’); 
subplot(1,3,1),imshow(x),title('original image') 
subplot(1,3,2),imshow(g),title('filtered image') 
subplot(1,3,3),imshow(g1),title('filtered image-1') 

Program 06: To perform spatial filtering of an image by convolution with a high pass filter 
(edge replication). 
>>x=[10 10 10 10 10 10 10 10;10 10 10 10 10 10 10 10;10 10 10 10 10 10 10 10; 
 90 90 90 90 90 90 90 90;90 90 90 90 90 90 90 90;90 90 90 90 90 90 90 90]; 
w=1/9*[-1 -1 -1;-1 8 -1;-1 -1 -1]; %kernel 
g=imfilter(x,w,'conv','replicate') 

Program 07: To perform spatial filtering of an image by convolution with a high pass filter 
(zero padding). 
 >>x=[10 10 10 10 10 10 10 10;10 10 10 10 10 10 10 10;10 10 10 10 10 10 10 10; 
 90 90 90 90 90 90 90 90;90 90 90 90 90 90 90 90;90 90 90 90 90 90 90 90]; 
w=1/9*[-1 -1 -1;-1 8 -1;-1 -1 -1]; %kernel 
g=imfilter(x,w,'conv',0) 

Program 01: To perform spatial filtering of an image by convoluting it with a high pass and a 
low pass filter (edge replication).
>> x=[10 10 10 10 10 10 10 10 ; 10 10 10 10 10 10 10 10; 10 10 10 10 10 10 10 10; 10 10 10 
10 10 10 10 10;90 90 90 90 90 90 90 90;90 90 90 90 90 90 90 90;90 90 90 90 90 90 90 90; 
90 90 90 90 90 90 90 90;90 90 90 90 90 90 90 90];
w=1/9*[-1 -1 -1; -1 8 -1; -1 -1 -1];
HP=imfilter(x,w,'conv',’replicate’) //A high pass kernel filter
w1=1/9*[1 1 1; 1 1 1; 1 1 1];
LP=imfilter(x,w1,'conv',’replicate’) //A low pass kernel filter
g3=x-LP

Program 02: To perform spatial filtering of an image by convoluting it with a high pass and a 
low pass filter (Zero Padding).
>> x=[10 10 10 10 10 10 10 10 ; 10 10 10 10 10 10 10 10; 10 10 10 10 10 10 10 10; 10 10 10 
10 10 10 10 10;90 90 90 90 90 90 90 90;90 90 90 90 90 90 90 90;90 90 90 90 90 90 90 90;90 
90 90 90 90 90 90 90;90 90 90 90 90 90 90 90];
w=1/9*[-1 -1 -1; -1 8 -1; -1 -1 -1];
HP=imfilter(x,w,'conv',0) //A high pass kernel filter
w1=1/9*[1 1 1; 1 1 1; 1 1 1];
LP=imfilter(x,w1,'conv',0) //A low pass kernel filter
g3=x-LP


Program 03: To perform spatial filtering of an image and observe the pixel value at the border 
of the convoluted image (Replication and Zero padding).
>> s=[1 2 3 4 5; 6 7 8 9 10; 1 2 3 4 5; 6 7 8 9 10; 1 2 3 4 5];
w=[0 0 0 0 0; 0 0 0 0 0; 0 0 1 0 0; 0 0 0 0 0; 0 0 0 0 0] //Window which gives 2 borders
g=imfilter(s,w,'conv','replicate','full') //Full means the original image during convolution 
g1=imfilter(s,w,'conv',0,'full') will be padded with border edge

Program 04: : To perform spatial filtering of an image without observing the pixel value.
>> s=[1 2 3 4 5; 6 7 8 9 10; 1 2 3 4 5; 6 7 8 9 10; 1 2 3 4 5];
w=[0 0 0 0 0; 0 0 0 0 0; 0 0 1 0 0; 0 0 0 0 0; 0 0 0 0 0]
g=imfilter(s,w,'conv','replicate','same')
g1=imfilter(s,w,'conv',0,'same')

Program 05: To increase the dimension of replication padding around the image.
>> s=[1 2 3 4 5; 6 7 8 9 10; 1 2 3 4 5; 6 7 8 9 10; 1 2 3 4 5];
f=padarray(s,[3 2],'replicate','pre')
f1=padarray(s,[3 2],'replicate','post')
f2=padarray(s,[3 2],'replicate','both')

Program 06: To increase the dimension of symmetric padding around the image.
>> s=[1 2 3 4 5; 6 7 8 9 10; 1 2 3 4 5; 6 7 8 9 10; 1 2 3 4 5];
f=padarray(s,[3 2],'symmetric','pre')
f1=padarray(s,[3 2],'symmetric','post')
f2=padarray(s,[3 2],'symmetric','both')

Program 07: To increase the dimension of zero padding around the image.
>> s=[1 2 3 4 5; 6 7 8 9 10; 1 2 3 4 5; 6 7 8 9 10; 1 2 3 4 5];
f=padarray(s,[3 2],0,'pre')
f1=padarray(s,[3 2],0,'post')
f2=padarray(s,[3 2],0,'both')

Program 08: To perform spatial filtering of an image by convoluting it with a gradient filter.
>> x=imread('1.jpg');
w=[-1 -1 0; -1 0 1;0 1 1];
w1=[0 1 1; -1 0 1 ; -1 -1 0];
g=imfilter(x,w,'replicate');
g1=imfilter(x,w1,'replicate');
subplot(1,3,1),imshow(x),title('Original Image')
subplot(1,3,2),imshow(g),title('Prewitt#1 image')
subplot(1,3,3),imshow(g1),title('Prewitt#2 Image')

Program 09 To perform spatial filtering of an image by convoluting it with a Laplacian filter.
>> x=imread('1.jpg');
w1=1/9*[-1 -1 -1; -1 8 -1; -1 -1 -1];
w2=1/9*[-1 -1 -1; -1 9 -1; -1 -1 -1];
g=imfilter(x,w1,'Conv','replicate');
g1=imfilter(x,w2,'Conv','replicate');
subplot(1,3,1),imshow(x),title('Original Image')
subplot(1,3,2),imshow(g),title('Lap#1 image')
subplot(1,3,3),imshow(g1),title('Lap#2 Image')

Program 10: To perform spatial filtering of an image by convoluting it with a gradient 
filter(5*5 and 7*7)
>>x=imread('1.jpg');
w1=[-1 -1 -1 -1 0; -1 -1 -1 0 1; -1 -1 0 1 1; -1 0 1 1 1; 0 1 1 1 1];
w2=[-1 -1 -1 -1 -1 -1 0; -1 -1 -1 -1 -1 0 1; -1 -1 -1 -1 0 1 1; -1 -1 -1 0 1 1 1; -1 0 1 1 1 1 1; 0 1 
1 1 1 1 1 ];
g=imfilter(x,w1,'conv','replicate');
g1=imfilter(x,w2,'conv','replicate');
subplot(1,3,1),imshow(x),title('Original Image')
subplot(1,3,2),imshow(g),title('Prewitt#1 image')
subplot(1,3,3),imshow(g1),title('Prewitt#2 Image')


Program 11: To perform spatial filtering in an image by convoluting it with different
Smoothening convolution filters.
>> w1=1/4*[0 1 0;1 0 1;0 1 0];
w2=1/40*[4 8 4;2 4 2;4 8 4];
w3=1/25*ones(5);
w4=1/49*ones(7);
g= imfilter(x,w1,'conv','replicate');
g1= imfilter(x,w2,'conv','replicate');
g2= imfilter(x,w3,'conv','replicate');
g3= imfilter(x,w4,'conv','replicate');
subplot(2,3,1),imshow(x),title('original image')
subplot(2,3,2),imshow(g),title('w1 image')
subplot(2,3,3),imshow(g1),title('w2 image')
subplot(2,3,4),imshow(g2),title('w3 image')
subplot(2,3,5),imshow(g3),title('w4 image')
